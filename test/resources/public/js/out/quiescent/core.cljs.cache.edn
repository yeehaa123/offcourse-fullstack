;; Analyzed by ClojureScript 1.7.145
{:use-macros {react-method quiescent.core}, :excludes #{}, :name quiescent.core, :imports nil, :requires {cljsjs.react cljsjs.react}, :uses nil, :defs {WrapperComponent {:name quiescent.core/WrapperComponent, :file "resources/public/js/out/quiescent/core.cljs", :line 178, :column 1, :end-line 178, :end-column 22, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/resources/public/js/out/quiescent/core.cljs", :line 178, :column 6, :end-line 178, :end-column 22}, :doc "Wrapper component used to mix-in lifecycle access"}, unmount {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/resources/public/js/out/quiescent/core.cljs", :line 144, :column 7, :end-line 144, :end-column 14, :arglists (quote ([node])), :doc "Remove a mounted Element from the given DOM node."}, :name quiescent.core/unmount, :variadic false, :file "resources/public/js/out/quiescent/core.cljs", :end-column 14, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 144, :end-line 144, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node])), :doc "Remove a mounted Element from the given DOM node."}, *component* {:name quiescent.core/*component*, :file "resources/public/js/out/quiescent/core.cljs", :line 5, :column 1, :end-line 5, :end-column 27, :dynamic true, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/resources/public/js/out/quiescent/core.cljs", :line 5, :column 16, :end-line 5, :end-column 27, :dynamic true}, :doc "Within a component lifecycle function, is be bound to the underlying ReactJS instance."}, wrapper {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/resources/public/js/out/quiescent/core.cljs", :line 215, :column 9, :end-line 215, :end-column 16, :arglists (quote ([child & kvs])), :doc "DEPRECATED. Wrappers do not work properly. Prefer adding lifecycle\n    methods at component creation time.\n\n    Create a wrapper function for a compoment implementing multiple\n    lifecycle functions. Lifecycle functions are specified as any number\n    of additional key-value pairs passed as arguments to this function.\n\n    Valid keys and values include:\n\n    :onUpdate - will call the provided function,\n                passing the rendered DOM node as a single arg\n    :onMount - will call the provided function,\n               passing the rendered DOM node as a single arg\n    :onWillUpdate - will call the provided function with no arguments\n    :onWillMount - will call the provided function with no arguments\n    :onWillUnmount - will call the provided function with no arguments", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(child kvs)], :arglists ([child & kvs]), :arglists-meta (nil)}}, :name quiescent.core/wrapper, :variadic true, :file "resources/public/js/out/quiescent/core.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(child kvs)], :arglists ([child & kvs]), :arglists-meta (nil)}, :method-params [(child kvs)], :protocol-impl nil, :arglists-meta (nil), :column 3, :line 215, :end-line 215, :max-fixed-arity 1, :fn-var true, :arglists ([child & kvs]), :doc "DEPRECATED. Wrappers do not work properly. Prefer adding lifecycle\n    methods at component creation time.\n\n    Create a wrapper function for a compoment implementing multiple\n    lifecycle functions. Lifecycle functions are specified as any number\n    of additional key-value pairs passed as arguments to this function.\n\n    Valid keys and values include:\n\n    :onUpdate - will call the provided function,\n                passing the rendered DOM node as a single arg\n    :onMount - will call the provided function,\n               passing the rendered DOM node as a single arg\n    :onWillUpdate - will call the provided function with no arguments\n    :onWillMount - will call the provided function with no arguments\n    :onWillUnmount - will call the provided function with no arguments"}, on-mount {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/resources/public/js/out/quiescent/core.cljs", :line 253, :column 7, :end-line 253, :end-column 15, :arglists (quote ([child f])), :doc "DEPRECATED. Wrappers do not work properly. Prefer adding lifecycle\n   methods at component creation time.\n\n   Wrap a component, specifying a function to be called on the\n   componentDidMount lifecycle event.\n\n   The function will be passed the rendered DOM node."}, :name quiescent.core/on-mount, :variadic false, :file "resources/public/js/out/quiescent/core.cljs", :end-column 15, :method-params ([child f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 253, :end-line 253, :max-fixed-arity 2, :fn-var true, :arglists (quote ([child f])), :doc "DEPRECATED. Wrappers do not work properly. Prefer adding lifecycle\n   methods at component creation time.\n\n   Wrap a component, specifying a function to be called on the\n   componentDidMount lifecycle event.\n\n   The function will be passed the rendered DOM node."}, TransitionGroup {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/resources/public/js/out/quiescent/core.cljs", :line 163, :column 9, :end-line 163, :end-column 24, :arglists (quote ([props children])), :doc "Return a TransitionGroup ReactElement, with the specified properties and children.\n\n    Note that unlike DOM factories, children is a single argument containing a seq of children, not\n    a vararg.\n\n    See http://facebook.github.io/react/docs/animation.html for details on how TransitionGroup\n    works."}, :name quiescent.core/TransitionGroup, :variadic false, :file "resources/public/js/out/quiescent/core.cljs", :end-column 24, :method-params ([props children]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 163, :end-line 163, :max-fixed-arity 2, :fn-var true, :arglists (quote ([props children])), :doc "Return a TransitionGroup ReactElement, with the specified properties and children.\n\n    Note that unlike DOM factories, children is a single argument containing a seq of children, not\n    a vararg.\n\n    See http://facebook.github.io/react/docs/animation.html for details on how TransitionGroup\n    works."}, unmount-at-node {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/resources/public/js/out/quiescent/core.cljs", :line 327, :column 20, :end-line 327, :end-column 35, :deprecated true, :arglists (quote ([node])), :doc "DEPRECATED: Use 'unmount' instead."}, :name quiescent.core/unmount-at-node, :variadic false, :file "resources/public/js/out/quiescent/core.cljs", :end-column 35, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 327, :deprecated true, :end-line 327, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node])), :doc "DEPRECATED: Use 'unmount' instead."}, build-lifecycle-impls {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/resources/public/js/out/quiescent/core.cljs", :line 47, :column 8, :end-line 47, :end-column 29, :private true, :arglists (quote ([opts-map]))}, :private true, :name quiescent.core/build-lifecycle-impls, :variadic false, :file "resources/public/js/out/quiescent/core.cljs", :end-column 29, :method-params ([opts-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([opts-map]))}, CSSTransitionGroup {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/resources/public/js/out/quiescent/core.cljs", :line 150, :column 9, :end-line 150, :end-column 27, :arglists (quote ([opts children])), :doc "Return a CSSTransitionGroup ReactElement, with the specified transition options and children.\n    Options must contain at least a :transitionName key.\n\n    Note that unlike DOM factories, children is a single argument containing a seq of children, not\n    a vararg.\n\n    See http://facebook.github.io/react/docs/animation.html for details on how CSSTransitionGroup\n    works."}, :name quiescent.core/CSSTransitionGroup, :variadic false, :file "resources/public/js/out/quiescent/core.cljs", :end-column 27, :method-params ([opts children]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 150, :end-line 150, :max-fixed-arity 2, :fn-var true, :arglists (quote ([opts children])), :doc "Return a CSSTransitionGroup ReactElement, with the specified transition options and children.\n    Options must contain at least a :transitionName key.\n\n    Note that unlike DOM factories, children is a single argument containing a seq of children, not\n    a vararg.\n\n    See http://facebook.github.io/react/docs/animation.html for details on how CSSTransitionGroup\n    works."}, on-will-mount {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/resources/public/js/out/quiescent/core.cljs", :line 276, :column 7, :end-line 276, :end-column 20, :arglists (quote ([child f])), :doc "DEPRECATED. Wrappers do not work properly. Prefer adding lifecycle\n   methods at component creation time.\n\n   Wrap a component, specifying a function to be called on the\n   componentWillMount lifecycle event.\n\n   The function will be called with no arguments."}, :name quiescent.core/on-will-mount, :variadic false, :file "resources/public/js/out/quiescent/core.cljs", :end-column 20, :method-params ([child f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 276, :end-line 276, :max-fixed-arity 2, :fn-var true, :arglists (quote ([child f])), :doc "DEPRECATED. Wrappers do not work properly. Prefer adding lifecycle\n   methods at component creation time.\n\n   Wrap a component, specifying a function to be called on the\n   componentWillMount lifecycle event.\n\n   The function will be called with no arguments."}, on-will-unmount {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/resources/public/js/out/quiescent/core.cljs", :line 310, :column 7, :end-line 310, :end-column 22, :arglists (quote ([child f])), :doc "DEPRECATED. Wrappers do not work properly. Prefer adding lifecycle\n   methods at component creation time.\n\n   Wrap a component, specifying a function to be called on the\n   componentWillUnmount lifecycle event.\n\n   The function will be called with no arguments."}, :name quiescent.core/on-will-unmount, :variadic false, :file "resources/public/js/out/quiescent/core.cljs", :end-column 22, :method-params ([child f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 310, :end-line 310, :max-fixed-arity 2, :fn-var true, :arglists (quote ([child f])), :doc "DEPRECATED. Wrappers do not work properly. Prefer adding lifecycle\n   methods at component creation time.\n\n   Wrap a component, specifying a function to be called on the\n   componentWillUnmount lifecycle event.\n\n   The function will be called with no arguments."}, component {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/resources/public/js/out/quiescent/core.cljs", :line 58, :column 7, :end-line 58, :end-column 16, :arglists (quote ([renderer] [renderer opts])), :doc "Return a factory function that will create a ReactElement, using the provided function as the\n  'render' method for a ReactJS component, which is created and instantiated behind-the-scenes.\n\n  The given render function should take a single immutable value as its first argument, and return\n  a single ReactElement. Additional arguments to the returned factory function are\n  /constant arguments/  which will be passed on as additional arguments to the  supplied render\n  function, but will *not* be included in any calculations regarding whether the element should\n  re-render. As such, they are suitable for values that will remain constant for  the lifetime of\n  the rendered element, such as message channels and configuration objects.\n\n  The optional 'opts' argument is a map which contains additional configuration keys:\n\n     :keyfn - a single-argument function which is invoked at component construction time. It is\n     passed the component's value, and returns the ReactJS key used to uniquely identify this\n     component among its children.\n\n     :name - the name of the element, used for debugging purposes.\n\n     :on-mount - A function which will be invoked once, immediately after initial rendering occurs.\n     It is passed the DOM node, the value and any constant args passed to the render fn. This maps\n     to the 'componentDidMount' lifecycle method in ReactJS.\n\n     :on-update - A function which will be invoked immediately after an update is flushed to the DOM,\n     but not on the initial render. It is is passed the underlying DOM node, the value,\n     the _old_ value, and any constant args passed to the render fn. This maps to the\n     'componentDidUpdate' lifecycle method in ReactJS.\n\n     :on-unmount - A function which will be invoked immediately before a the component is unmounted\n     from the DOM. It is passed the underlying DOM node, the most recent value and the most recent\n     constant args passed to the render fn. This maps to the 'componentWillUnmmount' lifecycle\n     method in ReactJS.\n\n     :on-render - A function which will be invoked immediately after the DOM is updated, both on the\n     initial render and any subsequent updates. It is is passed the underlying DOM node, the\n     value, the _old_  value (which will be nil in the case of the initial render) and any constant\n     args passed to the render fn. This maps to both the 'componentDidMount' and\n     'componentDidUpdate' lifecycle methods in ReactJS.\n\n     :will-enter - A function invoked whenever this component is added to a ReactTransitionGroup.\n     Invoked at the same time as :onMount. Is passed the underlying DOM node, a callback\n     function, the value and any constant args passed to the render fn. Maps to the\n     'componentWillEnter' lifecycle  method in ReactJS. See the ReactJS documentation at\n     http://facebook.github.io/react/docs/animation.html for full documentation of the behavior.\n\n     :did-enter - A function invoked after the callback provided to :willEnter is called. It is\n     passed the underlying DOM node, the value and any constant args passed to the render fn. Maps\n     to the 'componentDidEnter' lifecycle method in ReactJS. See the ReactJS documentation at\n     http://facebook.github.io/react/docs/animation.html for full documentation of the behavior.\n\n     :will-leave - A function invoked whenever this component is removed from a ReactTransitionGroup.\n     Is passed the underlying DOM node, a callback function, the most recent value and the most\n     recent constant args passed to the render fn. The DOM node will not be removed until the\n     callback is called. Maps to the 'componentWillEnter' lifecycle method in ReactJS. See the\n     ReactJS documentation at http://facebook.github.io/react/docs/animation.html for full\n     documentation of the behavior.\n\n     :did-leave - A function invoked after the callback provided to :willLeave is called (at the same\n     time as :onUnMount). Is passed the underlying DOM node, the most recent value and the most\n     recent constant args passed to the render fn. Maps to the 'componentDidLeave' lifecycle method\n     in ReactJS. See the ReactJS  documentation at\n     http://facebook.github.io/react/docs/animation.html for full documentation of the behavior.\n\n  The *component* dynamic var will be bound to the underlying ReactJS component for all invocations\n  of the render function and invocations of functions defined in the opts map.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([renderer] [renderer opts]), :arglists ([renderer] [renderer opts]), :arglists-meta (nil nil)}}, :name quiescent.core/component, :variadic false, :file "resources/public/js/out/quiescent/core.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([renderer] [renderer opts]), :arglists ([renderer] [renderer opts]), :arglists-meta (nil nil)}, :method-params ([renderer] [renderer opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 2, :fn-var true, :arglists ([renderer] [renderer opts]), :doc "Return a factory function that will create a ReactElement, using the provided function as the\n  'render' method for a ReactJS component, which is created and instantiated behind-the-scenes.\n\n  The given render function should take a single immutable value as its first argument, and return\n  a single ReactElement. Additional arguments to the returned factory function are\n  /constant arguments/  which will be passed on as additional arguments to the  supplied render\n  function, but will *not* be included in any calculations regarding whether the element should\n  re-render. As such, they are suitable for values that will remain constant for  the lifetime of\n  the rendered element, such as message channels and configuration objects.\n\n  The optional 'opts' argument is a map which contains additional configuration keys:\n\n     :keyfn - a single-argument function which is invoked at component construction time. It is\n     passed the component's value, and returns the ReactJS key used to uniquely identify this\n     component among its children.\n\n     :name - the name of the element, used for debugging purposes.\n\n     :on-mount - A function which will be invoked once, immediately after initial rendering occurs.\n     It is passed the DOM node, the value and any constant args passed to the render fn. This maps\n     to the 'componentDidMount' lifecycle method in ReactJS.\n\n     :on-update - A function which will be invoked immediately after an update is flushed to the DOM,\n     but not on the initial render. It is is passed the underlying DOM node, the value,\n     the _old_ value, and any constant args passed to the render fn. This maps to the\n     'componentDidUpdate' lifecycle method in ReactJS.\n\n     :on-unmount - A function which will be invoked immediately before a the component is unmounted\n     from the DOM. It is passed the underlying DOM node, the most recent value and the most recent\n     constant args passed to the render fn. This maps to the 'componentWillUnmmount' lifecycle\n     method in ReactJS.\n\n     :on-render - A function which will be invoked immediately after the DOM is updated, both on the\n     initial render and any subsequent updates. It is is passed the underlying DOM node, the\n     value, the _old_  value (which will be nil in the case of the initial render) and any constant\n     args passed to the render fn. This maps to both the 'componentDidMount' and\n     'componentDidUpdate' lifecycle methods in ReactJS.\n\n     :will-enter - A function invoked whenever this component is added to a ReactTransitionGroup.\n     Invoked at the same time as :onMount. Is passed the underlying DOM node, a callback\n     function, the value and any constant args passed to the render fn. Maps to the\n     'componentWillEnter' lifecycle  method in ReactJS. See the ReactJS documentation at\n     http://facebook.github.io/react/docs/animation.html for full documentation of the behavior.\n\n     :did-enter - A function invoked after the callback provided to :willEnter is called. It is\n     passed the underlying DOM node, the value and any constant args passed to the render fn. Maps\n     to the 'componentDidEnter' lifecycle method in ReactJS. See the ReactJS documentation at\n     http://facebook.github.io/react/docs/animation.html for full documentation of the behavior.\n\n     :will-leave - A function invoked whenever this component is removed from a ReactTransitionGroup.\n     Is passed the underlying DOM node, a callback function, the most recent value and the most\n     recent constant args passed to the render fn. The DOM node will not be removed until the\n     callback is called. Maps to the 'componentWillEnter' lifecycle method in ReactJS. See the\n     ReactJS documentation at http://facebook.github.io/react/docs/animation.html for full\n     documentation of the behavior.\n\n     :did-leave - A function invoked after the callback provided to :willLeave is called (at the same\n     time as :onUnMount). Is passed the underlying DOM node, the most recent value and the most\n     recent constant args passed to the render fn. Maps to the 'componentDidLeave' lifecycle method\n     in ReactJS. See the ReactJS  documentation at\n     http://facebook.github.io/react/docs/animation.html for full documentation of the behavior.\n\n  The *component* dynamic var will be bound to the underlying ReactJS component for all invocations\n  of the render function and invocations of functions defined in the opts map."}, on-render {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/resources/public/js/out/quiescent/core.cljs", :line 264, :column 7, :end-line 264, :end-column 16, :arglists (quote ([child f])), :doc "DEPRECATED. Wrappers do not work properly. Prefer adding lifecycle\n   methods at component creation time.\n\n   Wrap a component, specifying a function to be called on the\n   componentDidMount AND the componentDidUpdate lifecycle events.\n\n  The function will be passed the rendered DOM node."}, :name quiescent.core/on-render, :variadic false, :file "resources/public/js/out/quiescent/core.cljs", :end-column 16, :method-params ([child f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 264, :end-line 264, :max-fixed-arity 2, :fn-var true, :arglists (quote ([child f])), :doc "DEPRECATED. Wrappers do not work properly. Prefer adding lifecycle\n   methods at component creation time.\n\n   Wrap a component, specifying a function to be called on the\n   componentDidMount AND the componentDidUpdate lifecycle events.\n\n  The function will be passed the rendered DOM node."}, on-update {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/resources/public/js/out/quiescent/core.cljs", :line 242, :column 7, :end-line 242, :end-column 16, :arglists (quote ([child f])), :doc "DEPRECATED. Wrappers do not work properly. Prefer adding lifecycle\n   methods at component creation time.\n\n   Wrap a component, specifying a function to be called on the\n   componentDidUpdate lifecycle event.\n\n   The function will be passed the rendered DOM node."}, :name quiescent.core/on-update, :variadic false, :file "resources/public/js/out/quiescent/core.cljs", :end-column 16, :method-params ([child f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 242, :end-line 242, :max-fixed-arity 2, :fn-var true, :arglists (quote ([child f])), :doc "DEPRECATED. Wrappers do not work properly. Prefer adding lifecycle\n   methods at component creation time.\n\n   Wrap a component, specifying a function to be called on the\n   componentDidUpdate lifecycle event.\n\n   The function will be passed the rendered DOM node."}, render {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/resources/public/js/out/quiescent/core.cljs", :line 321, :column 7, :end-line 321, :end-column 13, :arglists (quote ([element node])), :doc "Given an Element, immediately render it, rooted to the\n   specified DOM node."}, :name quiescent.core/render, :variadic false, :file "resources/public/js/out/quiescent/core.cljs", :end-column 13, :method-params ([element node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 321, :end-line 321, :max-fixed-arity 2, :fn-var true, :arglists (quote ([element node])), :doc "Given an Element, immediately render it, rooted to the\n   specified DOM node."}, lifecycle-impls {:name quiescent.core/lifecycle-impls, :file "resources/public/js/out/quiescent/core.cljs", :line 8, :column 1, :end-line 8, :end-column 31, :private true, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/resources/public/js/out/quiescent/core.cljs", :line 8, :column 16, :end-line 8, :end-column 31, :private true}, :doc "Mapping of public lifecycle API to internal ReactJS API."}, on-will-update {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/resources/public/js/out/quiescent/core.cljs", :line 287, :column 7, :end-line 287, :end-column 21, :arglists (quote ([child f])), :doc "DEPRECATED. Wrappers do not work properly. Prefer adding lifecycle\n   methods at component creation time.\n\n   Wrap a component, specifying a function to be called on the\n   componentWillUpdate lifecycle event.\n\n   The function will be called with no arguments."}, :name quiescent.core/on-will-update, :variadic false, :file "resources/public/js/out/quiescent/core.cljs", :end-column 21, :method-params ([child f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 287, :end-line 287, :max-fixed-arity 2, :fn-var true, :arglists (quote ([child f])), :doc "DEPRECATED. Wrappers do not work properly. Prefer adding lifecycle\n   methods at component creation time.\n\n   Wrap a component, specifying a function to be called on the\n   componentWillUpdate lifecycle event.\n\n   The function will be called with no arguments."}, on-will-render {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/resources/public/js/out/quiescent/core.cljs", :line 298, :column 7, :end-line 298, :end-column 21, :arglists (quote ([child f])), :doc "DEPRECATED. Wrappers do not work properly. Prefer adding lifecycle\n   methods at component creation time.\n\n   Wrap a component, specifying a function to be called on the\n   componentWillMount AND the componentWillUpdate lifecycle events.\n\n   The function will be called with no arguments."}, :name quiescent.core/on-will-render, :variadic false, :file "resources/public/js/out/quiescent/core.cljs", :end-column 21, :method-params ([child f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 298, :end-line 298, :max-fixed-arity 2, :fn-var true, :arglists (quote ([child f])), :doc "DEPRECATED. Wrappers do not work properly. Prefer adding lifecycle\n   methods at component creation time.\n\n   Wrap a component, specifying a function to be called on the\n   componentWillMount AND the componentWillUpdate lifecycle events.\n\n   The function will be called with no arguments."}}, :require-macros {quiescent.core quiescent.core}, :cljs.analyzer/constants {:seen #{:on-mount :onWillUpdate :did-leave :children :onWillUnmount :componentDidUpdate :displayName :onUpdate :name :will-leave :did-enter :keyfn :wrappee :onWillMount :componentDidEnter :componentWillUnmount :on-render :shouldComponentUpdate :on-update :componentWillEnter :render :on-unmount :componentDidLeave :componentWillLeave :componentDidMount :will-enter :onMount}, :order [:on-mount :on-update :on-unmount :on-render :will-enter :did-enter :will-leave :did-leave :componentDidMount :componentDidUpdate :componentWillUnmount :componentWillEnter :componentDidEnter :componentWillLeave :componentDidLeave :name :displayName :shouldComponentUpdate :render :keyfn :children :wrappee :onUpdate :onMount :onWillMount :onWillUpdate :onWillUnmount]}, :doc nil}