;; Analyzed by ClojureScript 1.7.145
{:use-macros {go-loop cljs.core.async.macros}, :excludes #{}, :name offcourse.logger.service, :imports nil, :requires {cljs.core.async cljs.core.async, ajax.core ajax.core}, :uses {PUT ajax.core, <! cljs.core.async, >! cljs.core.async}, :defs {log-index {:name offcourse.logger.service/log-index, :file "src/cljs/offcourse/logger/service.cljs", :line 7, :column 1, :end-line 7, :end-column 15, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/logger/service.cljs", :line 7, :column 6, :end-line 7, :end-column 15}}, store-logs {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/logger/service.cljs", :line 9, :column 7, :end-line 9, :end-column 17, :arglists (quote ([action]))}, :name offcourse.logger.service/store-logs, :variadic false, :file "src/cljs/offcourse/logger/service.cljs", :end-column 17, :method-params ([action]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([action]))}, listen-for-actions {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/logger/service.cljs", :line 22, :column 7, :end-line 22, :end-column 25, :arglists (quote ([{input :channel-in}]))}, :name offcourse.logger.service/listen-for-actions, :variadic false, :file "src/cljs/offcourse/logger/service.cljs", :end-column 25, :method-params ([p__26951]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{input :channel-in}]))}, init {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/logger/service.cljs", :line 29, :column 7, :end-line 29, :end-column 11, :arglists (quote ([config]))}, :name offcourse.logger.service/init, :variadic false, :file "src/cljs/offcourse/logger/service.cljs", :end-column 11, :method-params ([config]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([config]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:format :ip :payload :keywords? :else :params :recur :type :checkpoint-id :collection-name :channel-in :json :course-id :location}, :order [:payload :format :keywords? :params :json :type :collection-name :course-id :location :ip :checkpoint-id :channel-in :recur :else]}, :doc nil}