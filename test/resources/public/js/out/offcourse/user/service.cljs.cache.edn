;; Analyzed by ClojureScript 1.7.145
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{}, :name offcourse.user.service, :imports nil, :requires {cljs.core.async cljs.core.async, ajax.core ajax.core, offcourse.models.action offcourse.models.action}, :uses {chan cljs.core.async, respond offcourse.models.action, >! cljs.core.async, GET ajax.core, alts! cljs.core.async}, :defs {user {:name offcourse.user.service/user, :file "src/cljs/offcourse/user/service.cljs", :line 7, :column 1, :end-line 7, :end-column 10, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/user/service.cljs", :line 7, :column 6, :end-line 7, :end-column 10}}, listen-for-actions {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/user/service.cljs", :line 10, :column 7, :end-line 10, :end-column 25, :arglists (quote ([{input :channel-in}]))}, :name offcourse.user.service/listen-for-actions, :variadic false, :file "src/cljs/offcourse/user/service.cljs", :end-column 25, :method-params ([p__25932]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{input :channel-in}]))}, handle-location {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/user/service.cljs", :line 16, :column 7, :end-line 16, :end-column 22, :arglists (quote ([channel position]))}, :name offcourse.user.service/handle-location, :variadic false, :file "src/cljs/offcourse/user/service.cljs", :end-column 22, :method-params ([channel position]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 2, :fn-var true, :arglists (quote ([channel position]))}, handle-ip {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/user/service.cljs", :line 23, :column 7, :end-line 23, :end-column 16, :arglists (quote ([channel response]))}, :name offcourse.user.service/handle-ip, :variadic false, :file "src/cljs/offcourse/user/service.cljs", :end-column 16, :method-params ([channel response]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 2, :fn-var true, :arglists (quote ([channel response]))}, init {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/user/service.cljs", :line 28, :column 7, :end-line 28, :end-column 11, :arglists (quote ([{output :channel-out, :as config}]))}, :name offcourse.user.service/init, :variadic false, :file "src/cljs/offcourse/user/service.cljs", :end-column 11, :method-params ([p__26133]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{output :channel-out, :as config}]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:ip :payload :found-ip :keywords? :else :response-format :found-location :recur :type :longitude :channel-out :latitude :channel-in :json :location :handler}, :order [:ip :location :channel-in :recur :type :payload :else :longitude :latitude :found-location :found-ip :channel-out :response-format :keywords? :handler :json]}, :doc nil}