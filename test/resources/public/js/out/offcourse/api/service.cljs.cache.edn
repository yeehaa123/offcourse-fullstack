;; Analyzed by ClojureScript 1.7.145
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{}, :name offcourse.api.service, :imports nil, :requires {cljs.core.async cljs.core.async, fake-data offcourse.api.fake-data, offcourse.api.fake-data offcourse.api.fake-data, co offcourse.models.collection, offcourse.models.collection offcourse.models.collection, offcourse.models.action offcourse.models.action}, :uses {timeout cljs.core.async, <! cljs.core.async, chan cljs.core.async, respond offcourse.models.action, >! cljs.core.async}, :defs {internal {:name offcourse.api.service/internal, :file "src/cljs/offcourse/api/service.cljs", :line 8, :column 1, :end-line 8, :end-column 14, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/api/service.cljs", :line 8, :column 6, :end-line 8, :end-column 14}}, fetch-resource {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/api/service.cljs", :line 10, :column 7, :end-line 10, :end-column 21, :arglists (quote ([{:keys [course-id checkpoint]}]))}, :name offcourse.api.service/fetch-resource, :variadic false, :file "src/cljs/offcourse/api/service.cljs", :end-column 21, :method-params ([p__25156]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [course-id checkpoint]}]))}, fetch-resources {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/api/service.cljs", :line 20, :column 7, :end-line 20, :end-column 22, :arglists (quote ([course]))}, :name offcourse.api.service/fetch-resources, :variadic false, :file "src/cljs/offcourse/api/service.cljs", :end-column 22, :method-params ([course]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([course]))}, fetch-collection {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/api/service.cljs", :line 30, :column 7, :end-line 30, :end-column 23, :arglists (quote ([{collection-name :collection-name}]))}, :name offcourse.api.service/fetch-collection, :variadic false, :file "src/cljs/offcourse/api/service.cljs", :end-column 23, :method-params ([p__25263]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{collection-name :collection-name}]))}, fetch-course {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/api/service.cljs", :line 40, :column 7, :end-line 40, :end-column 19, :arglists (quote ([{course-id :course-id, :as payload}]))}, :name offcourse.api.service/fetch-course, :variadic false, :file "src/cljs/offcourse/api/service.cljs", :end-column 19, :method-params ([p__25268]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{course-id :course-id, :as payload}]))}, fetch-courses {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/api/service.cljs", :line 48, :column 7, :end-line 48, :end-column 20, :arglists (quote ([{course-ids :course-ids}]))}, :name offcourse.api.service/fetch-courses, :variadic false, :file "src/cljs/offcourse/api/service.cljs", :end-column 20, :method-params ([p__25274]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{course-ids :course-ids}]))}, fetch-data {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/api/service.cljs", :line 55, :column 7, :end-line 55, :end-column 17, :arglists (quote ([{:keys [type], :as payload}]))}, :name offcourse.api.service/fetch-data, :variadic false, :file "src/cljs/offcourse/api/service.cljs", :end-column 17, :method-params ([p__25279]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [type], :as payload}]))}, find-data {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/api/service.cljs", :line 62, :column 7, :end-line 62, :end-column 16, :arglists (quote ([{:keys [type store course-id], :as payload}]))}, :name offcourse.api.service/find-data, :variadic false, :file "src/cljs/offcourse/api/service.cljs", :end-column 16, :method-params ([p__25287]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [type store course-id], :as payload}]))}, fetch-updates {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/api/service.cljs", :line 72, :column 7, :end-line 72, :end-column 20, :arglists (quote ([{:keys [type store course-id], :as payload}]))}, :name offcourse.api.service/fetch-updates, :variadic false, :file "src/cljs/offcourse/api/service.cljs", :end-column 20, :method-params ([p__25295]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [type store course-id], :as payload}]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:store :else :checkpoint :new :courses :featured :recur :type :popular :ignore :checkpoints :checkpoint-id :course-ids :requested-data :course :id :resource :collection-name :url :collection-ids :fetched-data :course-id :collection}, :order [:course-id :checkpoint :id :url :fetched-data :type :resource :checkpoint-id :checkpoints :requested-data :recur :else :collection-name :featured :popular :new :collection :collection-ids :course :course-ids :courses :ignore :store]}, :doc nil}