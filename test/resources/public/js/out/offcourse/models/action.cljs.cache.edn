;; Analyzed by ClojureScript 1.7.145
{:use-macros {go cljs.core.async.macros}, :excludes #{}, :name offcourse.models.action, :imports nil, :requires {cljs.core.async cljs.core.async}, :uses {>! cljs.core.async}, :defs {Action {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name offcourse.models.action/Action, :file "src/cljs/offcourse/models/action.cljs", :end-column 18, :type true, :column 12, :internal-ctor true, :line 5, :record true, :end-line 5, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->Action {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/models/action.cljs", :line 5, :column 12, :end-line 5, :end-column 18, :internal-ctor true, :factory :positional, :arglists (quote ([type payload]))}, :name offcourse.models.action/->Action, :variadic false, :file "src/cljs/offcourse/models/action.cljs", :end-column 18, :method-params ([type payload]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 5, :end-line 5, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type payload]))}, map->Action {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/models/action.cljs", :line 5, :column 12, :end-line 5, :end-column 18, :internal-ctor true, :factory :map, :arglists (quote ([G__24490]))}, :name offcourse.models.action/map->Action, :variadic false, :file "src/cljs/offcourse/models/action.cljs", :end-column 18, :method-params ([G__24490]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 5, :end-line 5, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__24490]))}, respond {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/models/action.cljs", :line 7, :column 7, :end-line 7, :end-column 14, :arglists (quote ([type & payload])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(type payload)], :arglists ([type & payload]), :arglists-meta (nil)}}, :name offcourse.models.action/respond, :variadic true, :file "src/cljs/offcourse/models/action.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(type payload)], :arglists ([type & payload]), :arglists-meta (nil)}, :method-params [(type payload)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists ([type & payload])}, >>! {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/models/action.cljs", :line 13, :column 7, :end-line 13, :end-column 10, :arglists (quote ([channel & response])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(channel response)], :arglists ([channel & response]), :arglists-meta (nil)}}, :name offcourse.models.action/>>!, :variadic true, :file "src/cljs/offcourse/models/action.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(channel response)], :arglists ([channel & response]), :arglists-meta (nil)}, :method-params [(channel response)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists ([channel & response])}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:payload :else payload :recur :type type}, :order [:type :payload type payload :recur :else]}, :doc nil}