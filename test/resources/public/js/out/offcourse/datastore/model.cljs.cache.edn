;; Analyzed by ClojureScript 1.7.145
{:use-macros nil, :excludes #{}, :name offcourse.datastore.model, :imports nil, :requires {offcourse.models.action offcourse.models.action, cl offcourse.models.collection, offcourse.models.collection offcourse.models.collection}, :uses {respond offcourse.models.action}, :defs {update-course {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/datastore/model.cljs", :line 16, :column 7, :end-line 16, :end-column 20, :arglists (quote ([store course]))}, :name offcourse.datastore.model/update-course, :variadic false, :file "src/cljs/offcourse/datastore/model.cljs", :end-column 20, :method-params ([store course]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 2, :fn-var true, :arglists (quote ([store course]))}, new-datastore {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/datastore/model.cljs", :line 7, :column 7, :end-line 7, :end-column 20, :arglists (quote ([]))}, :name offcourse.datastore.model/new-datastore, :variadic false, :file "src/cljs/offcourse/datastore/model.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, DataStore {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name offcourse.datastore.model/DataStore, :file "src/cljs/offcourse/datastore/model.cljs", :end-column 21, :type true, :column 12, :internal-ctor true, :line 5, :record true, :end-line 5, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->DataStore {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/datastore/model.cljs", :line 5, :column 12, :end-line 5, :end-column 21, :internal-ctor true, :factory :positional, :arglists (quote ([collections courses]))}, :name offcourse.datastore.model/->DataStore, :variadic false, :file "src/cljs/offcourse/datastore/model.cljs", :end-column 21, :method-params ([collections courses]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 5, :end-line 5, :max-fixed-arity 2, :fn-var true, :arglists (quote ([collections courses]))}, find-course {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/datastore/model.cljs", :line 31, :column 7, :end-line 31, :end-column 18, :arglists (quote ([store course-id]))}, :name offcourse.datastore.model/find-course, :variadic false, :file "src/cljs/offcourse/datastore/model.cljs", :end-column 18, :method-params ([store course-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 2, :fn-var true, :arglists (quote ([store course-id]))}, add-checkpoint {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/datastore/model.cljs", :line 22, :column 7, :end-line 22, :end-column 21, :arglists (quote ([store course-id checkpoint]))}, :name offcourse.datastore.model/add-checkpoint, :variadic false, :file "src/cljs/offcourse/datastore/model.cljs", :end-column 21, :method-params ([store course-id checkpoint]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 3, :fn-var true, :arglists (quote ([store course-id checkpoint]))}, update-courses {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/datastore/model.cljs", :line 19, :column 7, :end-line 19, :end-column 21, :arglists (quote ([store courses]))}, :name offcourse.datastore.model/update-courses, :variadic false, :file "src/cljs/offcourse/datastore/model.cljs", :end-column 21, :method-params ([store courses]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([store courses]))}, toggle-done {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/datastore/model.cljs", :line 25, :column 7, :end-line 25, :end-column 18, :arglists (quote ([store course-id checkpoint-id]))}, :name offcourse.datastore.model/toggle-done, :variadic false, :file "src/cljs/offcourse/datastore/model.cljs", :end-column 18, :method-params ([store course-id checkpoint-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 3, :fn-var true, :arglists (quote ([store course-id checkpoint-id]))}, augment-checkpoint {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/datastore/model.cljs", :line 28, :column 7, :end-line 28, :end-column 25, :arglists (quote ([store course-id checkpoint-id resource]))}, :name offcourse.datastore.model/augment-checkpoint, :variadic false, :file "src/cljs/offcourse/datastore/model.cljs", :end-column 25, :method-params ([store course-id checkpoint-id resource]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 4, :fn-var true, :arglists (quote ([store course-id checkpoint-id resource]))}, update-cache {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/datastore/model.cljs", :line 13, :column 7, :end-line 13, :end-column 19, :arglists (quote ([store fn]))}, :name offcourse.datastore.model/update-cache, :variadic false, :file "src/cljs/offcourse/datastore/model.cljs", :end-column 19, :method-params ([store fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([store fn]))}, map->DataStore {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/datastore/model.cljs", :line 5, :column 12, :end-line 5, :end-column 21, :internal-ctor true, :factory :map, :arglists (quote ([G__26612]))}, :name offcourse.datastore.model/map->DataStore, :variadic false, :file "src/cljs/offcourse/datastore/model.cljs", :end-column 21, :method-params ([G__26612]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 5, :end-line 5, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__26612]))}, update-collections {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/datastore/model.cljs", :line 10, :column 7, :end-line 10, :end-column 25, :arglists (quote ([store collection-name collection-ids]))}, :name offcourse.datastore.model/update-collections, :variadic false, :file "src/cljs/offcourse/datastore/model.cljs", :end-column 25, :method-params ([store collection-name collection-ids]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 3, :fn-var true, :arglists (quote ([store collection-name collection-ids]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:courses :collections courses collections}, :order [:collections :courses collections courses]}, :doc nil}