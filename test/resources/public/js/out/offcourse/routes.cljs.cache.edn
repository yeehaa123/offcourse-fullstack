;; Analyzed by ClojureScript 1.7.145
{:use-macros {defroute secretary.core}, :excludes #{}, :name offcourse.routes, :imports nil, :requires {string clojure.string, clojure.string clojure.string, actions offcourse.actions.index, offcourse.actions.index offcourse.actions.index, secretary secretary.core, secretary.core secretary.core, offcourse.models.action offcourse.models.action}, :uses {>>! offcourse.models.action}, :defs {route-names {:name offcourse.routes/route-names, :file "src/cljs/offcourse/routes.cljs", :line 9, :column 1, :end-line 9, :end-column 17, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/routes.cljs", :line 9, :column 6, :end-line 9, :end-column 17}}, arguments {:name offcourse.routes/arguments, :file "src/cljs/offcourse/routes.cljs", :line 14, :column 1, :end-line 14, :end-column 15, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/routes.cljs", :line 14, :column 6, :end-line 14, :end-column 15}}, update-vals {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/routes.cljs", :line 18, :column 7, :end-line 18, :end-column 18, :arglists (quote ([vals f map]))}, :name offcourse.routes/update-vals, :variadic false, :file "src/cljs/offcourse/routes.cljs", :end-column 18, :method-params ([vals f map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 3, :fn-var true, :arglists (quote ([vals f map]))}, convertRouteParams {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/routes.cljs", :line 21, :column 7, :end-line 21, :end-column 25, :arglists (quote ([id]))}, :name offcourse.routes/convertRouteParams, :variadic false, :file "src/cljs/offcourse/routes.cljs", :end-column 25, :method-params ([id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([id]))}, response {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/routes.cljs", :line 27, :column 7, :end-line 27, :end-column 15, :arglists (quote ([channel type & args])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(channel type args)], :arglists ([channel type & args]), :arglists-meta (nil)}}, :name offcourse.routes/response, :variadic true, :file "src/cljs/offcourse/routes.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(channel type args)], :arglists ([channel type & args]), :arglists-meta (nil)}, :method-params [(channel type args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 2, :fn-var true, :arglists ([channel type & args])}, init {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/routes.cljs", :line 35, :column 7, :end-line 35, :end-column 11, :arglists (quote ([{output :channel-out}]))}, :name offcourse.routes/init, :variadic false, :file "src/cljs/offcourse/routes.cljs", :end-column 11, :method-params ([p__27207]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{output :channel-out}]))}}, :require-macros {secretary secretary.core, secretary.core secretary.core}, :cljs.analyzer/constants {:seen #{:home :payload :checkpoint :default :requested-resource :featured :type :checkpoint-id :channel-out :course :collection-name :course-id :collection}, :order [:home :checkpoint :course :collection :course-id :checkpoint-id :collection-name :default :type :requested-resource :payload :channel-out :featured]}, :doc nil}