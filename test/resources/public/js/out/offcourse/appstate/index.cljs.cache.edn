;; Analyzed by ClojureScript 1.7.145
{:use-macros {go-loop cljs.core.async.macros}, :excludes #{}, :name offcourse.appstate.index, :imports nil, :requires {store offcourse.appstate.store, offcourse.appstate.store offcourse.appstate.store, service offcourse.appstate.service, offcourse.appstate.service offcourse.appstate.service, cljs.core.async cljs.core.async}, :uses {<! cljs.core.async, >! cljs.core.async}, :defs {listen-for-actions {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/appstate/index.cljs", :line 8, :column 7, :end-line 8, :end-column 25, :arglists (quote ([{input :channel-in, output :channel-out}]))}, :name offcourse.appstate.index/listen-for-actions, :variadic false, :file "src/cljs/offcourse/appstate/index.cljs", :end-column 25, :method-params ([p__26277]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{input :channel-in, output :channel-out}]))}, init {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/appstate/index.cljs", :line 29, :column 7, :end-line 29, :end-column 11, :arglists (quote ([config]))}, :name offcourse.appstate.index/init, :variadic false, :file "src/cljs/offcourse/appstate/index.cljs", :end-column 11, :method-params ([config]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([config]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:payload :else :recur :type :channel-out :channel-in}, :order [:channel-in :channel-out :recur :type :payload :else]}, :doc nil}