;; Analyzed by ClojureScript 1.7.145
{:use-macros {go-loop cljs.core.async.macros}, :excludes #{}, :name offcourse.views.index, :imports nil, :requires {cljs.core.async cljs.core.async, q quiescent.core, quiescent.core quiescent.core, d quiescent.dom, quiescent.dom quiescent.dom, actions offcourse.views.actions, offcourse.views.actions offcourse.views.actions, offcourse.views.containers.app offcourse.views.containers.app}, :uses {<! cljs.core.async, App offcourse.views.containers.app}, :defs {render {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/views/index.cljs", :line 9, :column 8, :end-line 9, :end-column 14, :private true, :arglists (quote ([handlers appstate]))}, :private true, :name offcourse.views.index/render, :variadic false, :file "src/cljs/offcourse/views/index.cljs", :end-column 14, :method-params ([handlers appstate]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 2, :fn-var true, :arglists (quote ([handlers appstate]))}, listen-for-actions {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/views/index.cljs", :line 13, :column 8, :end-line 13, :end-column 26, :private true, :arglists (quote ([{input :channel-in, output :channel-out, handlers :handlers}]))}, :private true, :name offcourse.views.index/listen-for-actions, :variadic false, :file "src/cljs/offcourse/views/index.cljs", :end-column 26, :method-params ([p__24946]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{input :channel-in, output :channel-out, handlers :handlers}]))}, init {:protocol-inline nil, :meta {:file "/Users/yeehaa/Documents/dev/clojure/offcourse/src/cljs/offcourse/views/index.cljs", :line 24, :column 7, :end-line 24, :end-column 11, :arglists (quote ([config]))}, :name offcourse.views.index/init, :variadic false, :file "src/cljs/offcourse/views/index.cljs", :end-column 11, :method-params ([config]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([config]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros, q quiescent.core, quiescent.core quiescent.core, d quiescent.dom, quiescent.dom quiescent.dom}, :cljs.analyzer/constants {:seen #{:payload :else :recur :type :handlers :appstate :channel-out :channel-in}, :order [:channel-in :channel-out :handlers :recur :appstate :type :payload :else]}, :doc nil}